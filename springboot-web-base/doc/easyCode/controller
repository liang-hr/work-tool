##导入宏定义
$!define

##设置表后缀（宏定义）
#setTableSuffix("Controller")

##保存文件（宏定义）
#save("/controller", "Controller.java")

##包路径（宏定义）
#setPackageSuffix("controller")

##定义服务名
#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), "Service"))

##定义实体对象名
#set($entityName = $!tool.firstLowerCase($!tableInfo.name))

##定义返参类名
#set($voClz =  $!tool.append($!tableInfo.name,"Vo"))
##定义实体返参名
#set($voName =  $!tool.append($!tool.firstLowerCase($!tableInfo.name),"Vo"))

##定义返参类名
#set($qoClz =  $!tool.append($!tableInfo.name,"Qo"))
##定义实体返参名
#set($qoName =  $!tool.append($!tool.firstLowerCase($!tableInfo.name),"Qo"))

##转换器对象
#set($convertName =  $!tool.append($!tool.firstLowerCase($!tableInfo.name),"Convert"))

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.api.ApiController;
import com.baomidou.mybatisplus.extension.api.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;
import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;
import $!{tableInfo.savePackageName}.qo.*;
import $!{tableInfo.savePackageName}.vo.*;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.io.Serializable;
import java.util.List;

##表注释（宏定义）
#tableComment("表控制层")
@RestController
@RequestMapping("$!tool.firstLowerCase($!tableInfo.name)")
@Api(value = "$!{tableInfo.comment}", tags = "$!{tableInfo.comment}")
public class $!{tableName}{

    @Resource
    private $!{tableInfo.name}Service $!{serviceName};

    /**
    * 分页查询所有数据
    *
    * @param pageQo 传参
    * @return 分页数据
    */
    @ApiOperation(value = "分页查询所有数据", notes = "分页查询所有数据")
    @PostMapping("page")
    public PageResult<$!{voClz}> selectByPage(@RequestBody @Validated BasePageQo pageQo) {

        PageResult<$!{voClz}> result = $!{serviceName}.selectByPage(pageQo);
        return result;
    }

    /**
    * 查询所有数据
    *
    * @return 所有数据
    */
    @ApiOperation(value = "查询所有数据", notes = "查询所有数据")
    @GetMapping("list")
    public BaseResult<List<$!{voClz}>> listAll() {

        List<$!{voClz}> result = $!{serviceName}.listAll();
        return BaseResult.success(result);
    }

    /**
    * 通过主键查询单条数据
    *
    * @param id 主键
    * @return 单条数据
    */
    @ApiOperation(value = "通过主键查询单条数据", notes = "通过主键查询单条数据")
    @GetMapping("get/{id}")
    public BaseResult<$!{voClz}> selectOne(@PathVariable Long id) {

        $!{voClz} $!{voName}=$!{serviceName}.selectOne(id);
        return BaseResult.success($!{voName});
    }

    /**
    * 新增数据
    *
    * @param $!{qoName} 实体对象
    * @return 新增结果
    */
    @ApiOperation(value = "新增数据", notes = "新增数据")
    @PostMapping("add")
    public BaseResult insert(@RequestBody @Validated $!{qoClz} $!{qoName}) {

        $!{serviceName}.insert($!{qoName});
        return BaseResult.success();
    }

    /**
    * 修改数据
    *
    * @param $!{qoName} 实体对象
    * @return 修改结果
    */
    @ApiOperation(value = "修改数据", notes = "修改数据")
    @PutMapping("update")
    public BaseResult modify(@RequestBody @Validated $!{qoClz} $!{qoName}) {

        $!{serviceName}.modify($!{qoName});
        return BaseResult.success();
    }

    /**
    * 通过主键集合批量删除数据
    *
    * @param idList 主键集合
    * @return 删除结果
    */
    @ApiOperation(value = "通过主键集合批量删除数据", notes = "通过主键集合批量删除数据")
    @DeleteMapping("deleteByIds")
    public BaseResult deleteByIds(
    @ApiParam(name="idList",value="id集合",required = true)
    @RequestBody List<Long> idList) {

        $!{serviceName}.deleteByIds(idList);
        return BaseResult.success();
    }

    /**
    * 通过主键删除单条数据
    *
    * @param id 主键
    * @return 删除结果
    */
    @ApiOperation(value = "通过主键删除单条数据", notes = "通过主键删除单条数据")
    @DeleteMapping("delete/{id}")
    public BaseResult<$!{voClz}> delete(@PathVariable Long id) {

        $!{serviceName}.delete(id);
        return BaseResult.success();
    }
}